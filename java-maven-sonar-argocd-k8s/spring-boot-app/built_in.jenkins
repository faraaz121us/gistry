pipeline {
    agent any
    
    stages {
        stage('Checkout') {
            steps {
                        // Clone the repository
                        git 'https://github.com/faraaz121us/gistry.git'
                     {
                        // Print the error message
                        echo "Failed to clone repository: ${e.message}"
                        // Mark the build as failed
                        error "Failed to clone repository"
                    }
                }
        }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                 //build the project and create a JAR file
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://192.168.43.199:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage('Build and Push Docker Image') {
              environment {
                    DOCKER_IMAGE = "faraaz1984/faraazrepodockerpublic:${BUILD_NUMBER}"
            // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
              steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                        def dockerImage = docker.image("${DOCKER_IMAGE}")
                            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                                dockerImage.push()
            }
        }
      }
    }
        
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins-docker"
                GIT_USER_NAME = "faraaz121us"
                }
                steps {
                withCredentials([string(credentialsId: 'gitsecret', variable: 'GITHUB_TOKEN')]) {
            sh """
                git config user.email "faraaz25@gmail.com"
                git config user.name "sarfaraz mahmood"
                BUILD_NUMBER=${BUILD_NUMBER}
                sed -i "s/replaceImageTag/$BUILD_NUMBER/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                git commit -m "Update deployment image to version $BUILD_NUMBER"
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            """
                }
            }
        }
    }    
}
